import { resolveStaticPaths, resolveStaticProps } from '@watheia/api.stackbit';
import { renderLayout } from '@watheia/waweb.ui';
import { GetStaticPaths, GetStaticProps, InferGetStaticPropsType } from 'next';
import { sourcebitDataClient } from 'sourcebit-target-next';
import { withRemoteDataUpdates } from 'sourcebit-target-next/with-remote-data-updates';

export type PageProps = InferGetStaticPropsType<typeof getStaticProps>;

export function Page({ page, site }: PageProps) {
  return renderLayout(page, site);
}

export const getStaticProps: GetStaticProps = async ({ params }) => {
  // The "data" object is generated by sourcebit.js and cached inside .sourcebit-nextjs-cache.json
  const data = await sourcebitDataClient.getData();
  const slug = params?.['slug'];
  // TODO merge logic into stackbit API on next reuse
  // sanitize slug value
  const urlPath =
    // if slug is string
    typeof slug === 'string'
      ? // and slug starts with '/'
        slug.startsWith('/')
        ? slug // use slug as is
        : `/${slug}` // otherwise prefix with '/'
      : slug // if slug exists but not string...
      ? `/${slug.join('/')}` // ...it SHOULD be an array of parts
      : '/'; // if all else fails, it SHOULD be the index page

  // const urlPath = '/' + (params?.['slug'] as string[]).join('/');
  const props = await resolveStaticProps(urlPath, data);
  return { props };
};

/**
 * The "data" object is generated by sourcebit.js and cached inside .sourcebit-nextjs-cache.json
 * @returns {{ paths: string[], fallback: boolean }}
 */
export const getStaticPaths: GetStaticPaths = async () => {
  const data = await sourcebitDataClient.getData();
  const paths = resolveStaticPaths(data);
  return { paths, fallback: false };
};

export default withRemoteDataUpdates(Page);
